# Set the refresh interval below. (How often it will get new data)
sleep_time = 2	# This is defined in seconds e.g. 60 would be 1 minute, 3600 would be an hour

# Flags to enable/disable sensor outputs, set True to enable/False to disable
ENABLE_BME280 = False	#PiicoDev Atmospheric Sensor
ENABLE_ENS160 = False	#PiicoDev Air Quality Sensor
ENABLE_VELM6030 = False	#PiicoDev Ambient Light Sensor
ENABLE_TIMER = True	#Makerverse Timer Hat

################################################
#Do not modify anything below this line.
################################################

if ENABLE_ENS160:
    from PiicoDev_ENS160 import PiicoDev_ENS160

if ENABLE_BME280:
    from PiicoDev_BME280 import PiicoDev_BME280

if ENABLE_VELM6030:
    from PiicoDev_VEML6030 import PiicoDev_VEML6030

if ENABLE_TIMER:
    from machine import Pin, ADC
    
from PiicoDev_Unified import sleep_ms


# Initialising all sensors
if ENABLE_ENS160:
    ens160 = PiicoDev_ENS160()   # Initialise the ENS160 module
    
if ENABLE_BME280:
    bme280 = PiicoDev_BME280()	 # Initialise the BME280 module
    
if ENABLE_VELM6030:
    light = PiicoDev_VEML6030()  # Initialise the VEML6030 module

# Defining variables
#BME280
if ENABLE_BME280:
    sensor = PiicoDev_BME280(t_mode=2, p_mode=5, h_mode=1,iir=2)	
    zeroAlt = sensor.altitude(pressure_sea_level=1013.25)

#Timer Hat
DONE = Pin(22, Pin.OUT) 	#Setting this pin High will remove power, and wait for the next interval


while True:    
    if ENABLE_BME280:
        
        tempC, presPa, humRH = sensor.values()
        pres_hPa = presPa / 100
        print(str(tempC)+" Â°C  " + str(pres_hPa)+" hPa  " + str(humRH)+" %RH")
        print(sensor.altitude() - zeroAlt) # show the CHANGE in altitude, since the script began
        sleep_(sleep_time)


    if ENABLE_ENS160:
            
        tempC, presPa, humRH = sensor.values()
        ens160.temperature = tempC
        ens160.humidity = humRH
        tvoc = ens160.tvoc
        eco2 = ens160.eco2
        
        # print total organic volatile compounds
        print('TVOC: ' + str(tvoc) + ' ppb')
        
        # print equivalent CO2
        print('eCO2: ' + str(eco2.value) + ' ppm (' + str(eco2.rating) +')' + ' Temperature: ' + str(ens160.temperature) + ' Humidity: ' + str(ens160.humidity))
        sleep(sleep_time)

    if ENABLE_VELM6030:

        # Read and print light data
        lightVal = light.read()
        print(str(lightVal) + " lux")
        sleep(sleep_time)

    if ENABLE_TIMER:
        DONE.on() # Assert DONE signal; powers down Pico
    
